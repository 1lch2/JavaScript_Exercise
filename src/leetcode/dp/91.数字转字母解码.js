// 一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：

// 'A' -> "1"
// 'B' -> "2"
// ...
// 'Z' -> "26"
// 要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。

// 例如，"11106" 可以映射为：
// "AAJF" ，将消息分组为 (1 1 10 6)
// "KJF" ，将消息分组为 (11 10 6)

// 注意，消息不能分组为  (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。

// 给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。

// 题目数据保证答案肯定是一个 32 位 的整数。

// 示例 1：
// 输入：s = "12"
// 输出：2
// 解释：它可以解码为 "AB"（1 2）或者 "L"（12）。

// 示例 2：
// 输入：s = "226"
// 输出：3
// 解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。

// 示例 3：
// 输入：s = "0"
// 输出：0
// 解释：没有字符映射到以 0 开头的数字。
// 含有 0 的有效映射是 'J' -> "10" 和 'T'-> "20" 。
// 由于没有字符，因此没有有效的方法对此进行解码，因为所有数字都需要映射。

// 提示：
// 1 <= s.length <= 100
// s 只包含数字，并且可能包含前导零。

/**
 * @param {string} s
 * @return {number}
 */
var numDecodings = function(s) {
  if(s[0] === "0") {
    return 0;
  }

  if(s.length === 1) {
    return 1;
  }

  // dp[i] 为以第 i + 1 个字母结束的字符串的解码数量
  // 取到最后一位需要数组有 s.length + 1 长度

  // 初始情况
  let dp = [1, 1];

  for(let i = 1; i <= s.length; i++) {
    let si = Number(s[i]);
    let si1 = Number(s[i - 1]);

    if(si === 0) {
      // 当s[i] 为 0 时，只有当它的前一位为 1 或 2 时才能拼成有效字母
      if(si1 === 1 || si1 === 2) {
        // 拼成有效字母时可以融入 i - 2 处的组合，因此数量相同
        dp[i + 1] = dp[i - 1];
      } else {
        // 出现无法解码的数字直接返回 0 
        // e.g.: 1230
        return 0;
      }
    } else if(si1 === 1 || (si1 === 2 && si <= 6)) {
      // s[i-1]和s[i] 凑成26以内数字的情况
      dp[i + 1] = dp[i] + dp[i - 1];
    } else {
      // 其他无法解码的情况，与前一位的解码数量相同
      dp[i + 1] = dp[i];
    }
  }

  return dp[s.length];
};
