// 用一个大小为 m x n 的二维网格 grid 表示一个箱子。
// 你有 n 颗球。箱子的顶部和底部都是开着的。

// 箱子中的每个单元格都有一个对角线挡板，跨过单元格的两个角，可以将球导向左侧或者右侧。

// 将球导向右侧的挡板跨过左上角和右下角，在网格中用 1 表示。
// 将球导向左侧的挡板跨过右上角和左下角，在网格中用 -1 表示。
// 在箱子每一列的顶端各放一颗球。每颗球都可能卡在箱子里或从底部掉出来。
// 如果球恰好卡在两块挡板之间的 "V" 形图案，或者被一块挡导向到箱子的任意一侧边上，就会卡住。

// 返回一个大小为 n 的数组 answer ，
// 其中 answer[i] 是球放在顶部的第 i 列后从底部掉出来的那一列对应的下标，
// 如果球卡在盒子里，则返回 -1 。


// 示例 1：
// 输入：grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]
// 输出：[1,-1,-1,-1,-1]
// 解释：示例如图：
// b0 球开始放在第 0 列上，最终从箱子底部第 1 列掉出。
// b1 球开始放在第 1 列上，会卡在第 2、3 列和第 1 行之间的 "V" 形里。
// b2 球开始放在第 2 列上，会卡在第 2、3 列和第 0 行之间的 "V" 形里。
// b3 球开始放在第 3 列上，会卡在第 2、3 列和第 0 行之间的 "V" 形里。
// b4 球开始放在第 4 列上，会卡在第 2、3 列和第 1 行之间的 "V" 形里。

// 示例 2：
// 输入：grid = [[-1]]
// 输出：[-1]
// 解释：球被卡在箱子左侧边上。

// 示例 3：
// 输入：grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]
// 输出：[0,1,2,3,4,-1]

// 提示：
// m == grid.length
// n == grid[i].length
// 1 <= m, n <= 100
// grid[i][j] 为 1 或 -1

/**
 * @param {number[][]} grid
 * @return {number[]}
 */
var findBall = function(grid) {
  const M = grid.length;
  const N = grid[0].length;

  // 速度矢量
  let v = grid[0].slice(0);
  // x 轴坐标
  let x = Array.from(new Array(N)).map((val, index) => index);

  /**
   * 
   * @param {number} v 速度方向
   * @param {number} x x坐标
   */
  const dropSingle = (v, x, level) => {
    // 定义方向：1 为向右，-1 为向左
    // 能否到达下一层，取决于方向上下一格的挡板的值是否和速度方向一致

    // 被右侧边界挡住
    if(v === 1 && x === N - 1){
      return -1;
    }

    // 被左侧边界挡住
    if(v === -1 && x === 0) {
      return -1;
    }

    // 落入 V 形
    if(v !== grid[level][x + v]) {
      return -1;
    }

    // 落入下一层
    if(v === grid[level][x + v]) {
      // 注意最后一层情况，不需要进入下一层了
      if(level === M - 1) {
        return x + v;
      }
      return dropSingle(grid[level + 1][x + v], x + v, level + 1);
    }
  };

  let res = new Array(N).fill(0);
  for(let i = 0; i < N; i++) {
    res[i] = dropSingle(v[i], x[i], 0);
  }

  return res;
};

let input = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]];
console.log(findBall(input));